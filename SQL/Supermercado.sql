--SUPER MERCADO--


-----------------------INICIO CREACION DE TABLAS--------------------------------
CREATE TABLE FIDE_SUPER_DEPARTAMENTO_TB(
    COD_DEPARTAMENTO NUMBER (10) PRIMARY KEY, 
    NOMBRE_DEPARTAMENTO VARCHAR2 (20),
    DESCRIPCION VARCHAR2 (30),
    TELEFONO_DEPARTAMENTO NUMBER (15)
);

CREATE TABLE FIDE_SUPER_GENERO_TB(
    COD_GENERO NUMBER (10) PRIMARY KEY,
    DESCRIPCION VARCHAR2 (10)
);

CREATE TABLE FIDE_SUPER_PUESTOS_TB(
    COD_PUESTO NUMBER (10) PRIMARY KEY,
    DESCRIPCION VARCHAR2 (25),
    COD_DEPARTAMENTO NUMBER (10),
    
    CONSTRAINT FK_DEPARTAMENTO FOREIGN KEY (COD_DEPARTAMENTO) 
    REFERENCES FIDE_SUPER_DEPARTAMENTO_TB(COD_DEPARTAMENTO)
);

CREATE TABLE FIDE_SUPER_EMPLEADO_TB (
    COD_EMPLEADO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    APELLIDO_1 VARCHAR2(25),
    APELLIDO_2 VARCHAR2 (25),
    CORREO VARCHAR2 (40),
    TELEFONO NUMBER (15),
    COD_GENERO NUMBER (10),
    SALARIO NUMBER (20),
    COD_PUESTO NUMBER (10),
    
    CONSTRAINT FK_GENERO FOREIGN KEY (COD_GENERO) 
    REFERENCES FIDE_SUPER_GENERO_TB(COD_GENERO),
    
    CONSTRAINT FK_PUESTO FOREIGN KEY (COD_PUESTO) 
    REFERENCES FIDE_SUPER_PUESTOS_TB(COD_PUESTO)
);

CREATE TABLE FIDE_SUPER_SUCURSAL_TB (
    COD_SUCURSAL NUMBER (15) PRIMARY KEY, 
    NOMBRE_SUCURSAL VARCHAR2 (30) NOT NULL,
    DIRECCION_SUCURSAL VARCHAR2 (30),
    TELEFONO NUMBER (15),
    COD_GERENTE NUMBER (15), -- ID EMPLEADO
    HORARIO VARCHAR2 (25),
    FECHA_APERTURA DATE, -- '2024-07-25' FORMATO Y,M,D
    ESTADO VARCHAR2 (25),
    
    CONSTRAINT FK_GERENTE FOREIGN KEY (COD_GERENTE) 
    REFERENCES FIDE_SUPER_EMPLEADO_TB(COD_EMPLEADO)
);

CREATE TABLE FIDE_SUPER_INCIDENTES_CLIENTES_TB(
    COD_INCIDENTE NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    INCIDENTE VARCHAR2 (50)
);

CREATE TABLE FIDE_SUPER_TELEFONOS_CLIENTES_TB(
    COD_TELEFONO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TELEFONO_CLIENTE NUMBER (15)
);

CREATE TABLE FIDE_SUPER_CLIENTE_TB (
    COD_CLIENTE NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    APELLIDO_1 VARCHAR2 (25) NOT NULL,
    APELLIDO_2 VARCHAR2 (25),
    CORREO_CLIENTE VARCHAR2 (35),
    MONTO_ULTIMA_COMPRA NUMBER (35),
    FECHA_ULTIMA_COMPRA DATE,
    COD_INCIDENTE NUMBER (10),
    COD_TELEFONO NUMBER (10),
    
    CONSTRAINT FK_INCIDENTE FOREIGN KEY (COD_INCIDENTE) 
    REFERENCES FIDE_SUPER_INCIDENTES_CLIENTES_TB(COD_INCIDENTE),
    
    CONSTRAINT FK_TELEFONO_CLI FOREIGN KEY (COD_TELEFONO) 
    REFERENCES FIDE_SUPER_TELEFONOS_CLIENTES_TB(COD_TELEFONO)
);

CREATE TABLE FIDE_SUPER_PRODUCTOS_TB(
    COD_PRODUCTO NUMBER (25) PRIMARY KEY,
    NOMBRE_PRODUCTO VARCHAR2 (25),
    TIPO_PRODUCTO VARCHAR2 (25),
    CANTIDAD NUMBER (25),
    PRECIO NUMBER (25)
);

CREATE TABLE FIDE_SUPER_PROVEEDORES_TB(
    COD_PROVEEDOR NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NOMBRE_PROVEEDOR VARCHAR2 (35),
    CORREO_PROVEEDOR VARCHAR2 (35),
    TELEFONO_PROVEEDOR NUMBER (15)
);

CREATE TABLE FIDE_SUPER_HISTORIAL_PROVEEDORES_TB(
    COD_HISTORIAL NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    COD_PROVEEDOR NUMBER (25),
    COD_PRODUCTO NUMBER (25),
    FECHA DATE,
    DESCRIPCION VARCHAR2 (55),
    CANTIDAD NUMBER (25),
    PAGO NUMBER (25),
    
    CONSTRAINT FK_PROVEEDOR FOREIGN KEY (COD_PROVEEDOR) 
    REFERENCES FIDE_SUPER_PROVEEDORES_TB(COD_PROVEEDOR),
    
    CONSTRAINT FK_PRODUCTO FOREIGN KEY (COD_PRODUCTO) 
    REFERENCES FIDE_SUPER_PRODUCTOS_TB(COD_PRODUCTO)
);

--TABLA MONEDA
CREATE TABLE FIDE_SUPER_MONEDA_TB(
    COD_MONEDA NUMBER PRIMARY KEY,
    NOMBRE_MONEDA VARCHAR2 (25),
    VALOR_MONEDA NUMBER
);


--TABLA PEDIDO
CREATE TABLE FIDE_SUPER_PEDIDO_TB(
    COD_PEDIDO NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    COD_PRODUCTO NUMBER,
    TIPO_MONEDA NUMBER,
    CANTIDAD_PRODUCTO NUMBER,
    ESTADO_PEDIDO NUMBER,
    
    CONSTRAINT FK_PRODUCTO_PEDIDO FOREIGN KEY (COD_PRODUCTO) 
    REFERENCES FIDE_SUPER_PRODUCTOS_TB(COD_PRODUCTO),
    
    CONSTRAINT FK_MONEDA_PEDIDO FOREIGN KEY (TIPO_MONEDA) 
    REFERENCES FIDE_SUPER_MONEDA_TB(COD_MONEDA)  
);

--PEDIDO CLIENTE
CREATE TABLE FIDE_SUPER_PEDIDO_CLIENTE_TB(
    COD_PEDIDO NUMBER(25) PRIMARY KEY, --PFK
    COD_CLIENTE NUMBER,--FK
    COD_EMPLEADO NUMBER,--FK

    TOTAL_PEDIDO NUMBER(30),
    NOTAS_PEDIDO VARCHAR2(50),
    DESCUENTO NUMBER,
    
    CONSTRAINT FK_PEDIDO_PEDIDO_CLIENTE FOREIGN KEY (COD_PEDIDO) 
    REFERENCES FIDE_SUPER_PEDIDO_TB(COD_PEDIDO),
    
    CONSTRAINT FK_CLIENTE_PEDIDO_CLIENTE FOREIGN KEY (COD_CLIENTE) 
    REFERENCES FIDE_SUPER_CLIENTE_TB(COD_CLIENTE),
    
    CONSTRAINT FK_EMPLEADO_PEDIDO FOREIGN KEY (COD_EMPLEADO) 
    REFERENCES FIDE_SUPER_EMPLEADO_TB(COD_EMPLEADO)
);

--PROVEDORES PRODUCTO
CREATE TABLE FIDE_SUPER_PROVEDORES_PRODUCTOS_TB(
    COD_PROVEDOR NUMBER (25) PRIMARY KEY,
    COD_PRODUCTO NUMBER (25),
    
    CONSTRAINT FK_PROVEDOR_PEDIDO_CLI FOREIGN KEY (COD_PROVEDOR) 
    REFERENCES FIDE_SUPER_PROVEEDORES_TB (COD_PROVEEDOR),
    
    CONSTRAINT FK_PRODUCTO_PEDIDO_CLI FOREIGN KEY (COD_PRODUCTO) 
    REFERENCES FIDE_SUPER_PRODUCTOS_TB (COD_PRODUCTO)

);
-----------------------FIN DE LA CREACION DE LAS TABLAS-------------------------


-----------------------INICIO CREACION DE SECUENCIAS----------------------------


--SECUENCIAS CREADAS POR JOSE DANIEL SOLANO

--1 Uso: Proporciona valores únicos para la columna COD_EMPLEADO en la tabla FIDE_SUPER_EMPLEADO_TB.
CREATE SEQUENCE FIDE_EMPLEADO_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;



--2 Uso: Genera valores únicos para la columna COD_CLIENTE en la tabla FIDE_SUPER_CLIENTE_TB.
CREATE SEQUENCE FIDE_CLIENTE_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;



--3 Uso: Proporciona valores únicos para la columna COD_PROVEEDOR en la tabla FIDE_SUPER_PROVEEDORES_TB. 
CREATE SEQUENCE FIDE_PROVEEDOR_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;


--4 Uso: Genera valores únicos para la columna COD_HISTORIAL en la tabla FIDE_SUPER_HISTORIAL_PROVEEDORES_TB.
CREATE SEQUENCE FIDE_HISTORIAL_PROVEEDOR_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;




--5 Uso: Proporciona valores únicos para la columna COD_PEDIDO en la tabla FIDE_SUPER_PEDIDO_TB.
CREATE SEQUENCE FIDE_PEDIDO_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;



--6 Uso: Genera valores únicos para la columna COD_INCIDENTE en la tabla FIDE_SUPER_INCIDENTES_CLIENTES_TB.
CREATE SEQUENCE FIDE_INCIDENTE_CLIENTE_seq
START WITH 1
INCREMENT BY 1
NOCACHE
NOCYCLE;



-----------------------FIN DE LA CREACION DE SECUENCIAS-------------------------



-----------------------INICIO DE LA CREACION DE VISTAS--------------------------


--1. Vista para obtener detalles de los empleados por departamento

CREATE OR REPLACE VIEW FIDE_EMPLEADOS_POR_DEPARTAMENTO_Vw AS
SELECT E.COD_EMPLEADO, E.APELLIDO_1, E.APELLIDO_2, E.CORREO, E.TELEFONO, E.SALARIO, D.NOMBRE_DEPARTAMENTO
FROM FIDE_SUPER_EMPLEADO_TB E
JOIN FIDE_SUPER_PUESTOS_TB P ON E.COD_PUESTO = P.COD_PUESTO
JOIN FIDE_SUPER_DEPARTAMENTO_TB D ON P.COD_DEPARTAMENTO = D.COD_DEPARTAMENTO;
/

--2. Vista para obtener el historial de pedidos de productos por proveedor
CREATE OR REPLACE VIEW FIDE_HISTORIAL_PROVEEDORES_Vw AS
SELECT HP.COD_HISTORIAL, P.NOMBRE_PROVEEDOR, PR.NOMBRE_PRODUCTO, HP.FECHA, HP.DESCRIPCION, HP.CANTIDAD, HP.PAGO
FROM FIDE_SUPER_HISTORIAL_PROVEEDORES_TB HP
JOIN FIDE_SUPER_PROVEEDORES_TB P ON HP.COD_PROVEEDOR = P.COD_PROVEEDOR
JOIN FIDE_SUPER_PRODUCTOS_TB PR ON HP.COD_PRODUCTO = PR.COD_PRODUCTO;
/

-- 3. Vista para obtener detalles de sucursales y sus gerentes

CREATE OR REPLACE VIEW FIDE_SUCURSALES_GERENTES_Vw AS
SELECT S.COD_SUCURSAL, S.NOMBRE_SUCURSAL, S.DIRECCION_SUCURSAL, S.TELEFONO, E.APELLIDO_1, E.APELLIDO_2, E.CORREO
FROM FIDE_SUPER_SUCURSAL_TB S
JOIN FIDE_SUPER_EMPLEADO_TB E ON S.COD_GERENTE = E.COD_EMPLEADO;
/


--4. Vista para obtener detalles de clientes y sus teléfonos
CREATE OR REPLACE VIEW FIDE_CLIENTES_TELEFONOS_Vw AS
SELECT C.COD_CLIENTE, C.APELLIDO_1, C.APELLIDO_2, C.CORREO_CLIENTE, T.TELEFONO_CLIENTE
FROM FIDE_SUPER_CLIENTE_TB C
JOIN FIDE_SUPER_TELEFONOS_CLIENTES_TB T ON C.COD_CLIENTE = T.COD_TELEFONO;
/


--5. Vista para obtener incidentes de clientes
CREATE OR REPLACE VIEW FIDE_INCIDENTES_CLIENTES_Vw AS
SELECT I.COD_INCIDENTE, C.APELLIDO_1, C.APELLIDO_2, I.INCIDENTE
FROM FIDE_SUPER_INCIDENTES_CLIENTES_TB I
JOIN FIDE_SUPER_CLIENTE_TB C ON I.COD_INCIDENTE = C.COD_CLIENTE; -- Ajusta la columna de unión según el diseño
/


--VISTAS CREADAS POR JOSE DANIEL SOLANO

--6. Muestra los detalles de los pedidos y los productos asociados.
CREATE OR REPLACE VIEW FIDE_PEDIDOS_PRODUCTOS_Vw AS
SELECT P.COD_PEDIDO, PR.NOMBRE_PRODUCTO, P.CANTIDAD_PRODUCTO, P.ESTADO_PEDIDO
FROM FIDE_SUPER_PEDIDO_TB P
JOIN FIDE_SUPER_PRODUCTOS_TB PR ON P.COD_PRODUCTO = PR.COD_PRODUCTO;
/

--7. Proporciona información sobre los proveedores y su historial de productos.

CREATE OR REPLACE VIEW FIDE_PROVEEDORES_HISTORIAL_Vw AS
SELECT PR.NOMBRE_PROVEEDOR, HP.FECHA, HP.DESCRIPCION, HP.CANTIDAD, HP.PAGO
FROM FIDE_SUPER_PROVEEDORES_TB PR
JOIN FIDE_SUPER_HISTORIAL_PROVEEDORES_TB HP ON PR.COD_PROVEEDOR = HP.COD_PROVEEDOR;
/


--8. Muestra los detalles de los clientes y la información sobre su última compra.

CREATE OR REPLACE VIEW FIDE_CLIENTES_ULTIMA_COMPRA_Vw AS
SELECT C.COD_CLIENTE, C.APELLIDO_1, C.APELLIDO_2, C.CORREO_CLIENTE, C.MONTO_ULTIMA_COMPRA, C.FECHA_ULTIMA_COMPRA
FROM FIDE_SUPER_CLIENTE_TB C;
/


--9. Muestra la información de productos junto con la cantidad en inventario.

CREATE OR REPLACE VIEW FIDE_PRODUCTOS_INVENTARIO_Vw AS
SELECT P.COD_PRODUCTO, P.NOMBRE_PRODUCTO, P.TIPO_PRODUCTO, P.CANTIDAD
FROM FIDE_SUPER_PRODUCTOS_TB P;
/

--10. Muestra los detalles de los empleados y los departamentos a los que están asignados.

CREATE OR REPLACE VIEW FIDE_EMPLEADOS_DEPARTAMENTOS_Vw AS
SELECT E.COD_EMPLEADO, E.APELLIDO_1, E.APELLIDO_2, E.CORREO, D.NOMBRE_DEPARTAMENTO
FROM FIDE_SUPER_EMPLEADO_TB E
JOIN FIDE_SUPER_PUESTOS_TB P ON E.COD_PUESTO = P.COD_PUESTO
JOIN FIDE_SUPER_DEPARTAMENTO_TB D ON P.COD_DEPARTAMENTO = D.COD_DEPARTAMENTO;
/


--11.Muestra los productos cuyo precio es superior al promedio de todos los productos en inventario.

CREATE OR REPLACE VIEW FIDE_PRODUCTOS_COSTOSOS_Vw AS
SELECT NOMBRE_PRODUCTO, PRECIO
FROM FIDE_SUPER_PRODUCTOS_TB
WHERE PRECIO > (SELECT AVG(PRECIO) FROM FIDE_SUPER_PRODUCTOS_TB);
/


--12. Muestra una lista de sucursales junto con los nombres de los empleados que las gestionan.

CREATE OR REPLACE VIEW FIDE_SUCURSALES_EMPLEADOS_Vw AS
SELECT S.NOMBRE_SUCURSAL, S.DIRECCION_SUCURSAL, E.APELLIDO_1 AS EMPLEADO_APELLIDO_1, E.APELLIDO_2 AS EMPLEADO_APELLIDO_2
FROM FIDE_SUPER_SUCURSAL_TB S
JOIN FIDE_SUPER_EMPLEADO_TB E ON S.COD_GERENTE = E.COD_EMPLEADO;
/


-----------------------FIN DE LA CREACION DE VISTAS-----------------------------


-----------------------INICIO DE LA CREACION DE FUNCIONES-----------------------


--1. Devuelve el nombre completo del empleado dando su código.

CREATE OR REPLACE FUNCTION FIDE_NOMBRE_COMPLETO_EMPLEADO_Fn(COD_EMPLEADO IN NUMBER) RETURN VARCHAR2 IS
    NOMBRE_COMPLETO VARCHAR2(50);
BEGIN
    SELECT APELLIDO_1 || ' ' || APELLIDO_2 INTO NOMBRE_COMPLETO
    FROM FIDE_SUPER_EMPLEADO_TB
    WHERE COD_EMPLEADO = COD_EMPLEADO;
    RETURN NOMBRE_COMPLETO;
END;
/


--2. Calcula el salario anual del empleado multiplicando el salario mensual por 12.

CREATE OR REPLACE FUNCTION FIDE_SALARIO_ANUAL_Fn(COD_EMPLEADO IN NUMBER) RETURN NUMBER IS
    SALARIO NUMBER(20);
BEGIN
    SELECT SALARIO * 12 INTO SALARIO
    FROM FIDE_SUPER_EMPLEADO_TB
    WHERE COD_EMPLEADO = COD_EMPLEADO;
    RETURN SALARIO;
END;
/


--3. Obtiene el nombre del departamento asociado a un código de puesto.

CREATE OR REPLACE FUNCTION FIDE_NOMBRE_DEPARTAMENTO_Fn(COD_PUESTO IN NUMBER) RETURN VARCHAR2 IS
    NOMBRE_DEPARTAMENTO VARCHAR2(20);
BEGIN
    SELECT D.NOMBRE_DEPARTAMENTO INTO NOMBRE_DEPARTAMENTO
    FROM FIDE_SUPER_DEPARTAMENTO_TB D
    JOIN FIDE_SUPER_PUESTOS_TB P ON D.COD_DEPARTAMENTO = P.COD_DEPARTAMENTO
    WHERE P.COD_PUESTO = COD_PUESTO;
    RETURN NOMBRE_DEPARTAMENTO;
END;
/


--4. Devuelve el nombre del producto correspondiente a un código de producto.

CREATE OR REPLACE FUNCTION FIDE_NOMBRE_PRODUCTO_Fn(COD_PRODUCTO IN NUMBER) RETURN VARCHAR2 IS
    NOMBRE_PRODUCTO VARCHAR2(25);
BEGIN
    SELECT NOMBRE_PRODUCTO INTO NOMBRE_PRODUCTO
    FROM FIDE_SUPER_PRODUCTOS_TB
    WHERE COD_PRODUCTO = COD_PRODUCTO;
    RETURN NOMBRE_PRODUCTO;
END;
/


--5. Obtiene el nombre del proveedor basado en su código.

CREATE OR REPLACE FUNCTION FIDE_NOMBRE_PROVEEDOR_Fn(COD_PROVEEDOR IN NUMBER) RETURN VARCHAR2 IS
    NOMBRE_PROVEEDOR VARCHAR2(35);
BEGIN
    SELECT NOMBRE_PROVEEDOR INTO NOMBRE_PROVEEDOR
    FROM FIDE_SUPER_PROVEEDORES_TB
    WHERE COD_PROVEEDOR = COD_PROVEEDOR;
    RETURN NOMBRE_PROVEEDOR;
END;
/


--6. Calcula el monto total de las compras de un cliente.

CREATE OR REPLACE FUNCTION FIDE_MONTO_TOTAL_COMPRAS_Fn(COD_CLIENTE IN NUMBER) RETURN NUMBER IS
    MONTO_TOTAL NUMBER(35);
BEGIN
    SELECT SUM(MONTO_ULTIMA_COMPRA) INTO MONTO_TOTAL
    FROM FIDE_SUPER_CLIENTE_TB
    WHERE COD_CLIENTE = COD_CLIENTE;
    RETURN MONTO_TOTAL;
END;
/


--7. Devuelve el número de incidentes registrados para un cliente.

CREATE OR REPLACE FUNCTION FIDE_NUMERO_INCIDENTES_Fn(COD_CLIENTE IN NUMBER) RETURN NUMBER IS
    NUM_INCIDENTES NUMBER;
BEGIN
    SELECT COUNT(*) INTO NUM_INCIDENTES
    FROM FIDE_SUPER_INCIDENTES_CLIENTES_TB
    WHERE COD_CLIENTE = COD_CLIENTE;
    RETURN NUM_INCIDENTES;
END;
/


--8. Obtiene la cantidad de productos relacionados con un proveedor específico.

CREATE OR REPLACE FUNCTION FIDE_CANTIDAD_PRODUCTOS_PROVEEDOR_Fn(COD_PROVEEDOR IN NUMBER) RETURN NUMBER IS
    CANTIDAD NUMBER;
BEGIN
    SELECT COUNT(*) INTO CANTIDAD
    FROM FIDE_SUPER_HISTORIAL_PROVEEDORES_TB
    WHERE COD_PROVEEDOR = COD_PROVEEDOR;
    RETURN CANTIDAD;
END;
/



-- FUNCIONES CREADAS POR JOSE DANIEL SOLANO

--9. Devuelve el salario promedio de los empleados en un departamento específico.

CREATE OR REPLACE FUNCTION FIDE_SALARIO_PROMEDIO_DEPARTAMENTO_Fn(COD_DEPARTAMENTO IN NUMBER) RETURN NUMBER IS
    SALARIO_PROMEDIO NUMBER;
BEGIN
    SELECT AVG(E.SALARIO) INTO SALARIO_PROMEDIO
    FROM FIDE_SUPER_EMPLEADO_TB E
    JOIN FIDE_SUPER_PUESTOS_TB P ON E.COD_PUESTO = P.COD_PUESTO
    WHERE P.COD_DEPARTAMENTO = COD_DEPARTAMENTO;
    RETURN SALARIO_PROMEDIO;
END;
/


--10. Obtiene el total de ventas de un producto específico.

CREATE OR REPLACE FUNCTION FIDE_TOTAL_VENTAS_PRODUCTO_Fn(COD_PRODUCTO IN NUMBER) RETURN NUMBER IS
    TOTAL_VENTAS NUMBER;
BEGIN
    SELECT SUM(CANTIDAD_PRODUCTO) INTO TOTAL_VENTAS
    FROM FIDE_SUPER_PEDIDO_TB
    WHERE COD_PRODUCTO = COD_PRODUCTO;
    RETURN TOTAL_VENTAS;
END;
/


--11. Devuelve el nombre del empleado con el salario más alto en un departamento.

CREATE OR REPLACE FUNCTION FIDE_EMPLEADO_SALARIO_ALTO_DEPARTAMENTO_Fn(COD_DEPARTAMENTO IN NUMBER) RETURN VARCHAR2 IS
    EMPLEADO_NOMBRE VARCHAR2(50);
BEGIN
    SELECT E.APELLIDO_1 || ' ' || E.APELLIDO_2 INTO EMPLEADO_NOMBRE
    FROM FIDE_SUPER_EMPLEADO_TB E
    JOIN FIDE_SUPER_PUESTOS_TB P ON E.COD_PUESTO = P.COD_PUESTO
    WHERE P.COD_DEPARTAMENTO = COD_DEPARTAMENTO
    ORDER BY E.SALARIO DESC
    FETCH FIRST 1 ROW ONLY;
    RETURN EMPLEADO_NOMBRE;
END;
/


--12. Calcula el total de pedidos realizados por un cliente.

CREATE OR REPLACE FUNCTION FIDE_TOTAL_PEDIDOS_CLIENTE_Fn(COD_CLIENTE IN NUMBER) RETURN NUMBER IS
    TOTAL_PEDIDOS NUMBER;
BEGIN
    SELECT COUNT(*) INTO TOTAL_PEDIDOS
    FROM FIDE_SUPER_PEDIDO_CLIENTE_TB
    WHERE COD_CLIENTE = COD_CLIENTE;
    RETURN TOTAL_PEDIDOS;
END;
/


--13. Obtiene el nombre del proveedor con el mayor número de productos suministrados.

CREATE OR REPLACE FUNCTION FIDE_PROVEEDOR_MAYOR_NUMERO_PRODUCTOS_Fn RETURN VARCHAR2 IS
    NOMBRE_PROVEEDOR VARCHAR2(35);
BEGIN
    SELECT P.NOMBRE_PROVEEDOR INTO NOMBRE_PROVEEDOR
    FROM FIDE_SUPER_PROVEEDORES_TB P
    JOIN FIDE_SUPER_HISTORIAL_PROVEEDORES_TB HP ON P.COD_PROVEEDOR = HP.COD_PROVEEDOR
    GROUP BY P.NOMBRE_PROVEEDOR
    ORDER BY COUNT(HP.COD_PRODUCTO) DESC
    FETCH FIRST 1 ROW ONLY;
    RETURN NOMBRE_PROVEEDOR;
END;
/


--14. Devuelve la cantidad total de productos en inventario.

CREATE OR REPLACE FUNCTION FIDE_CANTIDAD_PRODUCTOS_INVENTARIO_Fn RETURN NUMBER IS
    CANTIDAD_TOTAL NUMBER;
BEGIN
    SELECT SUM(CANTIDAD) INTO CANTIDAD_TOTAL
    FROM FIDE_SUPER_PRODUCTOS_TB;
    RETURN CANTIDAD_TOTAL;
END;
/


--15. Obtiene la fecha de la última compra de un cliente.

CREATE OR REPLACE FUNCTION FIDE_FECHA_ULTIMA_COMPRA_CLIENTE_Fn(COD_CLIENTE IN NUMBER) RETURN DATE IS
    FECHA_ULTIMA_COMPRA DATE;
BEGIN
    SELECT FECHA_ULTIMA_COMPRA INTO FECHA_ULTIMA_COMPRA
    FROM FIDE_SUPER_CLIENTE_TB
    WHERE COD_CLIENTE = COD_CLIENTE;
    RETURN FECHA_ULTIMA_COMPRA;
END;
/


--16. Devuelve el número de empleados en una sucursal.

CREATE OR REPLACE FUNCTION FIDE_NUMERO_EMPLEADOS_SUCURSAL_Fn(COD_SUCURSAL IN NUMBER) RETURN NUMBER IS
    NUM_EMPLEADOS NUMBER;
BEGIN
    SELECT COUNT(*) INTO NUM_EMPLEADOS
    FROM FIDE_SUPER_EMPLEADO_TB E
    JOIN FIDE_SUPER_SUCURSAL_TB S ON E.COD_EMPLEADO = S.COD_GERENTE
    WHERE S.COD_SUCURSAL = COD_SUCURSAL;
    RETURN NUM_EMPLEADOS;
END;
/


--17. Calcula el promedio de los pagos registrados en el historial de proveedores.

CREATE OR REPLACE FUNCTION FIDE_PROMEDIO_PAGO_HISTORIAL_PROVEEDORES_Fn RETURN NUMBER IS
    PROMEDIO_PAGO NUMBER;
BEGIN
    SELECT AVG(PAGO) INTO PROMEDIO_PAGO
    FROM FIDE_SUPER_HISTORIAL_PROVEEDORES_TB;
    RETURN PROMEDIO_PAGO;
END;
/


--18. Calcula el promedio de las ventas realizadas en una sucursal específica.

CREATE OR REPLACE FUNCTION FIDE_PROMEDIO_VENTAS_SUCURSAL_Fn(COD_SUCURSAL IN NUMBER) RETURN NUMBER IS
    PROMEDIO_VENTAS NUMBER;
BEGIN
    SELECT AVG(TOTAL_PEDIDO) INTO PROMEDIO_VENTAS
    FROM FIDE_SUPER_PEDIDO_CLIENTE_TB
    WHERE COD_PEDIDO IN (SELECT COD_PEDIDO
                         FROM FIDE_SUPER_PEDIDO_TB
                         WHERE COD_SUCURSAL = COD_SUCURSAL);
    RETURN PROMEDIO_VENTAS;
END;
/


-----------------------FIN DE LA CREACION DE FUNCIONES--------------------------



-----------------------INICIO DE LA CREACION DE PAQUETES------------------------


--1. Paquete de empleados: Incluye el procedimiento para agregar empleados y la función para obtener el salario anual. 

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_EMPLEADOS_Pckg AS
    PROCEDURE AGREGAR_EMPLEADO(AP1 VARCHAR2, AP2 VARCHAR2, CORREO VARCHAR2, TELEFONO NUMBER, COD_GENERO NUMBER, SALARIO NUMBER, COD_PUESTO NUMBER);
    FUNCTION OBTENER_SALARIO_ANUAL(COD_EMPLEADO NUMBER) RETURN NUMBER;
    FUNCTION OBTENER_NOMBRE_COMPLETO(COD_EMPLEADO NUMBER) RETURN VARCHAR2;
END FIDE_PAQUETE_EMPLEADOS_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_EMPLEADOS_Pckg AS
    PROCEDURE AGREGAR_EMPLEADO(AP1 VARCHAR2, AP2 VARCHAR2, CORREO VARCHAR2, TELEFONO NUMBER, COD_GENERO NUMBER, SALARIO NUMBER, COD_PUESTO NUMBER) IS
    BEGIN
        INSERT INTO FIDE_SUPER_EMPLEADO_TB (APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, COD_GENERO, SALARIO, COD_PUESTO)
        VALUES (AP1, AP2, CORREO, TELEFONO, COD_GENERO, SALARIO, COD_PUESTO);
    END AGREGAR_EMPLEADO;

    FUNCTION OBTENER_SALARIO_ANUAL(COD_EMPLEADO NUMBER) RETURN NUMBER IS
        SALARIO NUMBER;
    BEGIN
        SELECT SALARIO * 12 INTO SALARIO
        FROM FIDE_SUPER_EMPLEADO_TB
        WHERE COD_EMPLEADO = COD_EMPLEADO;
        RETURN SALARIO;
    END OBTENER_SALARIO_ANUAL;

    FUNCTION OBTENER_NOMBRE_COMPLETO(COD_EMPLEADO NUMBER) RETURN VARCHAR2 IS
        NOMBRE_COMPLETO VARCHAR2(50);
    BEGIN
        SELECT APELLIDO_1 || ' ' || APELLIDO_2 INTO NOMBRE_COMPLETO
        FROM FIDE_SUPER_EMPLEADO_TB
        WHERE COD_EMPLEADO = COD_EMPLEADO;
        RETURN NOMBRE_COMPLETO;
    END OBTENER_NOMBRE_COMPLETO;
END FIDE_PAQUETE_EMPLEADOS_Pckg;
/



--2. Paquete de Manejo de Departamentos: Incluye el procedimiento para agregar departamentos y la función para obtener el nombre del departamento.

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_DEPARTAMENTOS_Pckg AS
    PROCEDURE AGREGAR_DEPARTAMENTO(NOMBRE VARCHAR2, DESCRIPCION VARCHAR2, TELEFONO NUMBER);
    FUNCTION OBTENER_NOMBRE_DEPARTAMENTO(COD_DEPARTAMENTO NUMBER) RETURN VARCHAR2;
END FIDE_PAQUETE_DEPARTAMENTOS_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_DEPARTAMENTOS_Pckg AS
    PROCEDURE AGREGAR_DEPARTAMENTO(NOMBRE VARCHAR2, DESCRIPCION VARCHAR2, TELEFONO NUMBER) IS
    BEGIN
        INSERT INTO FIDE_SUPER_DEPARTAMENTO_TB (NOMBRE_DEPARTAMENTO, DESCRIPCION, TELEFONO_DEPARTAMENTO)
        VALUES (NOMBRE, DESCRIPCION, TELEFONO);
    END AGREGAR_DEPARTAMENTO;

    FUNCTION OBTENER_NOMBRE_DEPARTAMENTO(COD_DEPARTAMENTO NUMBER) RETURN VARCHAR2 IS
        NOMBRE VARCHAR2(20);
    BEGIN
        SELECT NOMBRE_DEPARTAMENTO INTO NOMBRE
        FROM FIDE_SUPER_DEPARTAMENTO_TB
        WHERE COD_DEPARTAMENTO = COD_DEPARTAMENTO;
        RETURN NOMBRE;
    END OBTENER_NOMBRE_DEPARTAMENTO;
END FIDE_PAQUETE_DEPARTAMENTOS_Pckg;
/



--3. Manejo de Sucursales: Incluye el procedimiento para agregar sucursales y la función para obtener el nombre del gerente.

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_SUCURSALES_Pckg AS
    PROCEDURE AGREGAR_SUCURSAL(NOMBRE VARCHAR2, DIRECCION VARCHAR2, TELEFONO NUMBER, COD_GERENTE NUMBER, HORARIO VARCHAR2, FECHA_APERTURA DATE, ESTADO VARCHAR2);
    FUNCTION OBTENER_NOMBRE_GERENTE(COD_SUCURSAL NUMBER) RETURN VARCHAR2;
END FIDE_PAQUETE_SUCURSALES_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_SUCURSALES_Pckg AS
    PROCEDURE AGREGAR_SUCURSAL(NOMBRE VARCHAR2, DIRECCION VARCHAR2, TELEFONO NUMBER, COD_GERENTE NUMBER, HORARIO VARCHAR2, FECHA_APERTURA DATE, ESTADO VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_SUPER_SUCURSAL_TB (NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, TELEFONO, COD_GERENTE, HORARIO, FECHA_APERTURA, ESTADO)
        VALUES (NOMBRE, DIRECCION, TELEFONO, COD_GERENTE, HORARIO, FECHA_APERTURA, ESTADO);
    END AGREGAR_SUCURSAL;

    FUNCTION OBTENER_NOMBRE_GERENTE(COD_SUCURSAL NUMBER) RETURN VARCHAR2 IS
        NOMBRE_GERENTE VARCHAR2(50);
    BEGIN
        SELECT E.APELLIDO_1 || ' ' || E.APELLIDO_2 INTO NOMBRE_GERENTE
        FROM FIDE_SUPER_SUCURSAL_TB S
        JOIN FIDE_SUPER_EMPLEADO_TB E ON S.COD_GERENTE = E.COD_EMPLEADO
        WHERE S.COD_SUCURSAL = COD_SUCURSAL;
        RETURN NOMBRE_GERENTE;
    END OBTENER_NOMBRE_GERENTE;
END FIDE_PAQUETE_SUCURSALES_Pckg;
/



--4. Manejo de Incidentes de Clientes: Incluye el procedimiento para agregar incidentes y la función para obtener incidentes de clientes.

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_INCIDENTES_CLIENTES_Pckg AS
    PROCEDURE AGREGAR_INCIDENTE(COD_INCIDENTE NUMBER, INCIDENTE VARCHAR2);
    FUNCTION OBTENER_INCIDENTES_CLIENTE(COD_INCIDENTE NUMBER) RETURN VARCHAR2;
END FIDE_PAQUETE_INCIDENTES_CLIENTES_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_INCIDENTES_CLIENTES_Pckg AS
    PROCEDURE AGREGAR_INCIDENTE(COD_INCIDENTE NUMBER, INCIDENTE VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_SUPER_INCIDENTES_CLIENTES_TB (COD_INCIDENTE, INCIDENTE)
        VALUES (COD_INCIDENTE, INCIDENTE);
    END AGREGAR_INCIDENTE;

    FUNCTION OBTENER_INCIDENTES_CLIENTE(COD_INCIDENTE NUMBER) RETURN VARCHAR2 IS
        INCIDENTES VARCHAR2(4000);
    BEGIN
        SELECT LISTAGG(INCIDENTE, '; ') WITHIN GROUP (ORDER BY COD_INCIDENTE) INTO INCIDENTES
        FROM FIDE_SUPER_INCIDENTES_CLIENTES_TB
        WHERE COD_INCIDENTE = COD_INCIDENTE;
        RETURN INCIDENTES;
    END OBTENER_INCIDENTES_CLIENTE;
END FIDE_PAQUETE_INCIDENTES_CLIENTES_Pckg;
/



--5. Paquete de Manejo de Proveedores: Incluye el procedimiento para agregar historial y la función para obtener historial de proveedores.

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_HISTORIAL_PROVEEDORES_Pckg AS
    PROCEDURE AGREGAR_HISTORIAL(COD_PROVEEDOR NUMBER, COD_PRODUCTO NUMBER, FECHA DATE, DESCRIPCION VARCHAR2, CANTIDAD NUMBER, PAGO NUMBER);
    FUNCTION OBTENER_HISTORIAL_PROVEEDOR(COD_PROVEEDOR NUMBER) RETURN VARCHAR2;
END FIDE_PAQUETE_HISTORIAL_PROVEEDORES_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_HISTORIAL_PROVEEDORES_Pckg AS
    PROCEDURE AGREGAR_HISTORIAL(COD_PROVEEDOR NUMBER, COD_PRODUCTO NUMBER, FECHA DATE, DESCRIPCION VARCHAR2, CANTIDAD NUMBER, PAGO NUMBER) IS
    BEGIN
        INSERT INTO FIDE_SUPER_HISTORIAL_PROVEEDORES_TB (COD_PROVEEDOR, COD_PRODUCTO, FECHA, DESCRIPCION, CANTIDAD, PAGO)
        VALUES (COD_PROVEEDOR, COD_PRODUCTO, FECHA, DESCRIPCION, CANTIDAD, PAGO);
    END AGREGAR_HISTORIAL;

    FUNCTION OBTENER_HISTORIAL_PROVEEDOR(COD_PROVEEDOR NUMBER) RETURN VARCHAR2 IS
        HISTORIAL VARCHAR2(4000);
    BEGIN
        SELECT LISTAGG(DESCRIPCION || ' (' || FECHA || ')', '; ') WITHIN GROUP (ORDER BY FECHA) INTO HISTORIAL
        FROM FIDE_SUPER_HISTORIAL_PROVEEDORES_TB
        WHERE COD_PROVEEDOR = COD_PROVEEDOR;
        RETURN HISTORIAL;
    END OBTENER_HISTORIAL_PROVEEDOR;
END FIDE_PAQUETE_HISTORIAL_PROVEEDORES_Pckg;
/



-- PAQUETES CREADOS POR JOSE DANIEL SOLANO

--6. Incluye el procedimiento para agregar productos y la función para obtener el precio de los productos

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_PRODUCTOS_Pckg AS
    PROCEDURE AGREGAR_PRODUCTO(NOMBRE_PRODUCTO VARCHAR2, PRECIO NUMBER, CANTIDAD NUMBER, COD_PRODUCTO NUMBER);
    FUNCTION OBTENER_PRECIO_PRODUCTO(COD_PRODUCTO NUMBER) RETURN NUMBER;
    FUNCTION OBTENER_STOCK_PRODUCTO(COD_PRODUCTO NUMBER) RETURN NUMBER;
END FIDE_PAQUETE_PRODUCTOS_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_PRODUCTOS_Pckg AS
    PROCEDURE AGREGAR_PRODUCTO(NOMBRE_PRODUCTO VARCHAR2, PRECIO NUMBER, CANTIDAD NUMBER, COD_PRODUCTO NUMBER) IS
    BEGIN
        INSERT INTO FIDE_SUPER_PRODUCTOS_TB (NOMBRE_PRODUCTO, PRECIO, CANTIDAD, COD_PRODUCTO)
        VALUES (NOMBRE_PRODUCTO, PRECIO, CANTIDAD, COD_PRODUCTO);
    END AGREGAR_PRODUCTO;

    FUNCTION OBTENER_PRECIO_PRODUCTO(COD_PRODUCTO NUMBER) RETURN NUMBER IS
        PRECIO NUMBER;
    BEGIN
        SELECT PRECIO INTO PRECIO
        FROM FIDE_SUPER_PRODUCTOS_TB
        WHERE COD_PRODUCTO = COD_PRODUCTO;
        RETURN PRECIO;
    END OBTENER_PRECIO_PRODUCTO;

    FUNCTION OBTENER_STOCK_PRODUCTO(COD_PRODUCTO NUMBER) RETURN NUMBER IS
        STOCK NUMBER;
    BEGIN
        SELECT CANTIDAD INTO STOCK
        FROM FIDE_SUPER_PRODUCTOS_TB
        WHERE COD_PRODUCTO = COD_PRODUCTO;
        RETURN STOCK;
    END OBTENER_STOCK_PRODUCTO;
END FIDE_PAQUETE_PRODUCTOS_Pckg;
/



--7. Paquete de Manejo de Productos: Incluye el procedimiento para agregar clientes y la función para obtener el teléfono de los clientes.

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_PROVEEDORES_Pckg AS
    PROCEDURE AGREGAR_PROVEEDOR(NOMBRE_PROVEEDOR VARCHAR2, TELEFONO_PROVEEDOR NUMBER, CORREO_PROVEEDOR VARCHAR2);
    FUNCTION OBTENER_INFORMACION_PROVEEDOR(COD_PROVEEDOR NUMBER) RETURN VARCHAR2;
END FIDE_PAQUETE_PROVEEDORES_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_PROVEEDORES_Pckg AS
    PROCEDURE AGREGAR_PROVEEDOR(NOMBRE_PROVEEDOR VARCHAR2, TELEFONO_PROVEEDOR NUMBER, CORREO_PROVEEDOR VARCHAR2) IS
    BEGIN
        INSERT INTO FIDE_SUPER_PROVEEDORES_TB (NOMBRE_PROVEEDOR, TELEFONO_PROVEEDOR, CORREO_PROVEEDOR)
        VALUES (NOMBRE_PROVEEDOR, TELEFONO_PROVEEDOR, CORREO_PROVEEDOR);
    END AGREGAR_PROVEEDOR;

    FUNCTION OBTENER_INFORMACION_PROVEEDOR(COD_PROVEEDOR NUMBER) RETURN VARCHAR2 IS
        INFORMACION VARCHAR2(100);
    BEGIN
        SELECT NOMBRE_PROVEEDOR || ', ' || CORREO_PROVEEDOR || ', ' || TELEFONO_PROVEEDOR INTO INFORMACION
        FROM FIDE_SUPER_PROVEEDORES_TB
        WHERE COD_PROVEEDOR = COD_PROVEEDOR;
        RETURN INFORMACION;
    END OBTENER_INFORMACION_PROVEEDOR;
END FIDE_PAQUETE_PROVEEDORES_Pckg;
/



--8.Paquete pedidos:  Incluye el procedimiento para agregar pedidos y la función para obtener el monto de los pedidos.

CREATE OR REPLACE PACKAGE FIDE_PAQUETE_VENTAS_Pckg AS
    PROCEDURE REGISTRAR_VENTA(COD_CLIENTE NUMBER, COD_PRODUCTO NUMBER, CANTIDAD NUMBER, FECHA DATE, PRECIO_TOTAL NUMBER);
    FUNCTION OBTENER_TOTAL_VENTAS_CLIENTE(COD_CLIENTE NUMBER) RETURN NUMBER;
END FIDE_PAQUETE_VENTAS_Pckg;
/

CREATE OR REPLACE PACKAGE BODY FIDE_PAQUETE_VENTAS_Pckg AS
    PROCEDURE REGISTRAR_VENTA(COD_CLIENTE NUMBER, COD_PRODUCTO NUMBER, CANTIDAD NUMBER, FECHA DATE, PRECIO_TOTAL NUMBER) IS
    BEGIN
        INSERT INTO FIDE_SUPER_VENTAS_TB (COD_CLIENTE, COD_PRODUCTO, CANTIDAD, FECHA, PRECIO_TOTAL)
        VALUES (COD_CLIENTE, COD_PRODUCTO, CANTIDAD, FECHA, PRECIO_TOTAL);
    END REGISTRAR_VENTA;

    FUNCTION OBTENER_TOTAL_VENTAS_CLIENTE(COD_CLIENTE NUMBER) RETURN NUMBER IS
        TOTAL NUMBER;
    BEGIN
        SELECT SUM(PRECIO_TOTAL) INTO TOTAL
        FROM FIDE_SUPER_VENTAS_TB
        WHERE COD_CLIENTE = COD_CLIENTE;
        RETURN TOTAL;
    END OBTENER_TOTAL_VENTAS_CLIENTE;
END FIDE_PAQUETE_VENTAS_Pckg;
/


-----------------------FALTAN MINIMO 2 PAQUETES---------------------------------
--9. 
--10. 

-----------------------FIN DE LA CREACION DE PAQUETES---------------------------




-----------------------INICIO DE LA CREACION DE PROCESOS ALMACENADOS------------



-------------------PROCEDIMIENTOS ALMACENADOS 12/25 ----------------------------
-----------------CREATE/UPDATE/DELETE OBJETOS DE LA TABLA

    -- Procedimientos para la tabla FIDE_SUPER_DEPARTAMENTO_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_DEPARTAMENTO_TB_SP(
        P_COD_DEPARTAMENTO IN NUMBER,
        P_NOMBRE_DEPARTAMENTO IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_TELEFONO_DEPARTAMENTO IN NUMBER
    )
IS
BEGIN
    INSERT INTO FIDE_SUPER_DEPARTAMENTO_TB(COD_DEPARTAMENTO, NOMBRE_DEPARTAMENTO, DESCRIPCION, TELEFONO_DEPARTAMENTO)
    VALUES (P_COD_DEPARTAMENTO, P_NOMBRE_DEPARTAMENTO, P_DESCRIPCION, P_TELEFONO_DEPARTAMENTO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_DEPARTAMENTO_TB_SP(
        P_COD_DEPARTAMENTO IN NUMBER,
        P_NOMBRE_DEPARTAMENTO IN VARCHAR2,
        P_DESCRIPCION IN VARCHAR2,
        P_TELEFONO_DEPARTAMENTO IN NUMBER
    )
IS
    BEGIN
        UPDATE FIDE_SUPER_DEPARTAMENTO_TB
            SET NOMBRE_DEPARTAMENTO = P_NOMBRE_DEPARTAMENTO,
            DESCRIPCION = P_DESCRIPCION,
            TELEFONO_DEPARTAMENTO = P_TELEFONO_DEPARTAMENTO
        WHERE COD_DEPARTAMENTO = P_COD_DEPARTAMENTO;
END;


CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_DEPARTAMENTO_TB_SP(
        P_COD_DEPARTAMENTO IN NUMBER
    )
IS
    BEGIN
        DELETE FROM FIDE_SUPER_DEPARTAMENTO_TB 
        WHERE COD_DEPARTAMENTO = P_COD_DEPARTAMENTO;
END;

--PROCEDIMIENTOS FIDE_SUPER_GENERO_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_GENERO_TB_SP(
        P_COD_GENERO IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    )
IS
BEGIN
    INSERT INTO FIDE_SUPER_GENERO_TB(COD_GENERO, DESCRIPCION)
    VALUES (p_COD_GENERO, p_DESCRIPCION);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_GENERO_TB_SP(
        P_COD_GENERO IN NUMBER,
        P_DESCRIPCION IN VARCHAR2
    ) IS
    BEGIN
        UPDATE FIDE_SUPER_GENERO_TB
        SET DESCRIPCION = P_DESCRIPCION
        WHERE COD_GENERO = P_COD_GENERO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_GENERO_TB_SP(
        P_COD_GENERO IN NUMBER
    )
IS
BEGIN
    DELETE FROM FIDE_SUPER_GENERO_TB WHERE COD_GENERO = P_COD_GENERO;
END;

    -- PROCEDIMIENTOS FIDE_SUPER_PUESTOS_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_PUESTOS_TB_SP(
    P_COD_PUESTO IN NUMBER,
    P_DESCRIPCION IN VARCHAR2,
    P_COD_DEPARTAMENTO IN NUMBER
    )
IS
BEGIN
    INSERT INTO FIDE_SUPER_PUESTOS_TB(COD_PUESTO, DESCRIPCION, COD_DEPARTAMENTO)
    VALUES (P_COD_PUESTO, P_DESCRIPCION, P_COD_DEPARTAMENTO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_PUESTOS_TB_SP(
        P_COD_PUESTO IN NUMBER,
        P_DESCRIPCION IN VARCHAR2,
        P_COD_DEPARTAMENTO IN NUMBER
    )
IS
BEGIN
    UPDATE FIDE_SUPER_PUESTOS_TB
    SET DESCRIPCION = P_DESCRIPCION,COD_DEPARTAMENTO = P_COD_DEPARTAMENTO
    WHERE COD_PUESTO = P_COD_PUESTO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_PUESTOS_TB_SP(
        P_COD_PUESTO IN NUMBER
    )
IS
BEGIN
    DELETE FROM FIDE_SUPER_PUESTOS_TB WHERE COD_PUESTO = P_COD_PUESTO;
END;


-- PROCEDIMIENTOS FIDE_SUPER_EMPLEADO_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_EMPLEADO_TB_SP(
    P_APELLIDO_1 IN VARCHAR2,
    P_APELLIDO_2 IN VARCHAR2,
    P_CORREO IN VARCHAR2,
    P_TELEFONO IN NUMBER,
    P_COD_GENERO IN NUMBER,
    P_SALARIO IN NUMBER,
    P_COD_PUESTO IN NUMBER
    )
IS
BEGIN
    INSERT INTO FIDE_SUPER_EMPLEADO_TB(APELLIDO_1, APELLIDO_2, CORREO, TELEFONO, COD_GENERO, SALARIO, COD_PUESTO)
        VALUES (P_APELLIDO_1, P_APELLIDO_2, P_CORREO, P_TELEFONO, P_COD_GENERO, P_SALARIO, P_COD_PUESTO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_EMPLEADO_TB_SP(
        P_COD_EMPLEADO IN NUMBER,
        P_APELLIDO_1 IN VARCHAR2,
        P_APELLIDO_2 IN VARCHAR2,
        P_CORREO IN VARCHAR2,
        P_TELEFONO IN NUMBER,
        P_COD_GENERO IN NUMBER,
        P_SALARIO IN NUMBER,
        P_COD_PUESTO IN NUMBER
    )
IS
BEGIN
    UPDATE FIDE_SUPER_EMPLEADO_TB
        SET APELLIDO_1 = P_APELLIDO_1,
            APELLIDO_2 = P_APELLIDO_2,
            CORREO = P_CORREO,
            TELEFONO = P_TELEFONO,
            COD_GENERO = P_COD_GENERO,
            SALARIO = P_SALARIO,
            COD_PUESTO = P_COD_PUESTO
    WHERE COD_EMPLEADO = P_COD_EMPLEADO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_EMPLEADO_TB_SP(
        P_COD_EMPLEADO IN NUMBER
    )
IS
BEGIN
    DELETE FROM FIDE_SUPER_EMPLEADO_TB WHERE COD_EMPLEADO = P_COD_EMPLEADO;
END;


    -- PROCEDIMIENTO FIDE_SUPER_SUCURSAL_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_SUCURSAL_TB_SP(
    P_COD_SUCURSAL IN NUMBER,
    P_NOMBRE_SUCURSAL IN VARCHAR2,
    P_DIRECCION_SUCURSAL IN VARCHAR2,
    P_TELEFONO IN NUMBER,
    P_COD_GERENTE IN NUMBER,
    P_HORARIO IN VARCHAR2,
    P_FECHA_APERTURA IN DATE,
    P_ESTADO IN VARCHAR2
    )
IS
    BEGIN
        INSERT INTO FIDE_SUPER_SUCURSAL_TB(COD_SUCURSAL, NOMBRE_SUCURSAL, DIRECCION_SUCURSAL, TELEFONO, COD_GERENTE, HORARIO, FECHA_APERTURA, ESTADO)
        VALUES (P_COD_SUCURSAL, P_NOMBRE_SUCURSAL, P_DIRECCION_SUCURSAL, P_TELEFONO, P_COD_GERENTE, P_HORARIO, P_FECHA_APERTURA, P_ESTADO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_SUCURSAL_TB_SP(
    P_COD_SUCURSAL IN NUMBER,
    P_NOMBRE_SUCURSAL IN VARCHAR2,
    P_DIRECCION_SUCURSAL IN VARCHAR2,
    P_TELEFONO IN NUMBER,
    P_COD_GERENTE IN NUMBER,
    P_HORARIO IN VARCHAR2,
    P_FECHA_APERTURA IN DATE,
    P_ESTADO IN VARCHAR2
    )
IS
    BEGIN
        UPDATE FIDE_SUPER_SUCURSAL_TB
        SET NOMBRE_SUCURSAL = P_NOMBRE_SUCURSAL,
            DIRECCION_SUCURSAL = P_DIRECCION_SUCURSAL,
            TELEFONO = P_TELEFONO,
            COD_GERENTE = P_COD_GERENTE,
            HORARIO = P_HORARIO,
            FECHA_APERTURA = P_FECHA_APERTURA,
            ESTADO = P_ESTADO
        WHERE COD_SUCURSAL = P_COD_SUCURSAL;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_SUCURSAL_TB_SP(
        P_COD_SUCURSAL IN NUMBER
    )
IS
    BEGIN
        DELETE FROM FIDE_SUPER_SUCURSAL_TB WHERE COD_SUCURSAL = P_COD_SUCURSAL;
END;


-- PROCEDIMIENTO FIDE_SUPER_PEDIDO_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_PEDIDO_TB_SP(
        P_COD_PRODUCTO IN NUMBER,
        P_TIPO_MONEDA IN NUMBER,
        P_CANTIDAD_PRODUCTO IN NUMBER,
        P_ESTADO_PEDIDO IN NUMBER
    )
IS
    BEGIN
        INSERT INTO FIDE_SUPER_PEDIDO_TB(COD_PRODUCTO, TIPO_MONEDA, CANTIDAD_PRODUCTO, ESTADO_PEDIDO)
        VALUES (P_COD_PRODUCTO, P_TIPO_MONEDA, P_CANTIDAD_PRODUCTO, P_ESTADO_PEDIDO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_PEDIDO_TB_SP(
        P_COD_PEDIDO IN NUMBER,
        P_COD_PRODUCTO IN NUMBER,
        P_TIPO_MONEDA IN NUMBER,
        P_CANTIDAD_PRODUCTO IN NUMBER,
        P_ESTADO_PEDIDO IN NUMBER
    )
IS
    BEGIN
        UPDATE FIDE_SUPER_PEDIDO_TB
        SET COD_PRODUCTO = P_COD_PRODUCTO,
            TIPO_MONEDA = P_TIPO_MONEDA,
            CANTIDAD_PRODUCTO = P_CANTIDAD_PRODUCTO,
            ESTADO_PEDIDO = P_ESTADO_PEDIDO
        WHERE COD_PEDIDO = P_COD_PEDIDO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_PEDIDO_TB_SP(
        P_COD_PEDIDO IN NUMBER
    ) 
IS
    BEGIN
        DELETE FROM FIDE_SUPER_PEDIDO_TB WHERE COD_PEDIDO = p_COD_PEDIDO;
END;

    -- PROCEDIMIENTOS FIDE_SUPER_PEDIDO_CLIENTE_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_PEDIDO_CLIENTE_TB_SP(
        P_COD_PEDIDO IN NUMBER,
        P_COD_CLIENTE IN NUMBER,
        P_COD_EMPLEADO IN NUMBER,
        P_TOTAL_PEDIDO IN NUMBER,
        P_NOTAS_PEDIDO IN VARCHAR2,
        P_DESCUENTO IN NUMBER
    ) IS
BEGIN
    INSERT INTO FIDE_SUPER_PEDIDO_CLIENTE_TB(COD_PEDIDO, COD_CLIENTE, COD_EMPLEADO, TOTAL_PEDIDO, NOTAS_PEDIDO, DESCUENTO)
    VALUES (P_COD_PEDIDO, P_COD_CLIENTE, P_COD_EMPLEADO, P_TOTAL_PEDIDO, P_NOTAS_PEDIDO, P_DESCUENTO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_PEDIDO_CLIENTE_TB_SP(
        P_COD_PEDIDO IN NUMBER,
        P_COD_CLIENTE IN NUMBER,
        P_COD_EMPLEADO IN NUMBER,
        P_TOTAL_PEDIDO IN NUMBER,
        P_NOTAS_PEDIDO IN VARCHAR2,
        P_DESCUENTO IN NUMBER
    )
IS
    BEGIN
        UPDATE FIDE_SUPER_PEDIDO_CLIENTE_TB
        SET COD_CLIENTE = P_COD_CLIENTE,
            COD_EMPLEADO = P_COD_EMPLEADO,
            TOTAL_PEDIDO = P_TOTAL_PEDIDO,
            NOTAS_PEDIDO = P_NOTAS_PEDIDO,
            DESCUENTO = P_DESCUENTO
        WHERE COD_PEDIDO = P_COD_PEDIDO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_PEDIDO_CLIENTE_TB_SP(
        P_COD_PEDIDO IN NUMBER
    )
IS
    BEGIN
        DELETE FROM FIDE_SUPER_PEDIDO_CLIENTE_TB WHERE COD_PEDIDO = p_COD_PEDIDO;
END;

-- PROCEDIMIENTOS FIDE_SUPER_PROVEDORES_PRODUCTOS_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_PROVEDORES_PRODUCTOS_TB_SP(
        P_COD_PROVEDOR IN NUMBER,
        P_COD_PRODUCTO IN NUMBER
    )
IS
    BEGIN
        INSERT INTO FIDE_SUPER_PROVEDORES_PRODUCTOS_TB(COD_PROVEDOR, COD_PRODUCTO)
        VALUES (P_COD_PROVEDOR, P_COD_PRODUCTO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_PROVEDORES_PRODUCTOS_TB_SP(
    P_COD_PROVEDOR IN NUMBER,
    P_COD_PRODUCTO IN NUMBER
    )
IS
    BEGIN
        UPDATE FIDE_SUPER_PROVEDORES_PRODUCTOS_TB
        SET COD_PRODUCTO = p_COD_PRODUCTO
        WHERE COD_PROVEDOR = p_COD_PROVEDOR;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_PROVEDORES_PRODUCTOS_TB_SP(
        P_COD_PROVEDOR IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_SUPER_PROVEDORES_PRODUCTOS_TB WHERE COD_PROVEDOR = P_COD_PROVEDOR;
END;

--PROCEDIMINETOS PARA INCIDENTES CLIENTES-------
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_INCIDENTES_CLIENTES_TB_SP(
        P_INCIDENTE IN VARCHAR2
    )IS
    BEGIN
        INSERT INTO FIDE_SUPER_INCIDENTES_CLIENTES_TB(INCIDENTE)
        VALUES (P_INCIDENTE);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_INCIDENTES_CLIENTES_TB_SP(
        P_COD_INCIDENTE IN NUMBER,
        P_INCIDENTE IN VARCHAR2
    ) IS
    BEGIN
        UPDATE FIDE_SUPER_INCIDENTES_CLIENTES_TB
        SET INCIDENTE = P_INCIDENTE
        WHERE COD_INCIDENTE = P_COD_INCIDENTE;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_INCIDENTES_CLIENTES_TB_SP(
        P_COD_INCIDENTE IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_SUPER_INCIDENTES_CLIENTES_TB 
        WHERE COD_INCIDENTE = P_COD_INCIDENTE;
END;
--LISTO    

-- Procedimientos para la tabla FIDE_SUPER_CLIENTE_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_CLIENTE_TB_SP(
    P_APELLIDO_1 IN VARCHAR2,
    P_APELLIDO_2 IN VARCHAR2,
    P_CORREO_CLIENTE IN VARCHAR2,
    P_MONTO_ULTIMA_COMPRA IN NUMBER,
    P_FECHA_ULTIMA_COMPRA IN DATE,
    P_COD_INCIDENTE IN NUMBER,
    P_COD_TELEFONO IN NUMBER
    ) IS
    BEGIN
        INSERT INTO FIDE_SUPER_CLIENTE_TB(APELLIDO_1, APELLIDO_2, CORREO_CLIENTE, MONTO_ULTIMA_COMPRA, FECHA_ULTIMA_COMPRA, COD_INCIDENTE, COD_TELEFONO)
        VALUES (P_APELLIDO_1, P_APELLIDO_2, P_CORREO_CLIENTE, P_MONTO_ULTIMA_COMPRA, P_FECHA_ULTIMA_COMPRA, p_COD_INCIDENTE, p_COD_TELEFONO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_CLIENTE_TB_SP(
        P_COD_CLIENTE IN NUMBER,
        P_APELLIDO_1 IN VARCHAR2,
        P_APELLIDO_2 IN VARCHAR2,
        P_CORREO_CLIENTE IN VARCHAR2,
        P_MONTO_ULTIMA_COMPRA IN NUMBER,
        P_FECHA_ULTIMA_COMPRA IN DATE,
        P_COD_INCIDENTE IN NUMBER,
        P_COD_TELEFONO IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_SUPER_CLIENTE_TB
        SET APELLIDO_1 = P_APELLIDO_1,
            APELLIDO_2 = P_APELLIDO_2,
            CORREO_CLIENTE = P_CORREO_CLIENTE,
            MONTO_ULTIMA_COMPRA = P_MONTO_ULTIMA_COMPRA,
            FECHA_ULTIMA_COMPRA = P_FECHA_ULTIMA_COMPRA,
            COD_INCIDENTE = P_COD_INCIDENTE,
            COD_TELEFONO = P_COD_TELEFONO
        WHERE COD_CLIENTE = P_COD_CLIENTE;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_CLIENTE_TB_SP(
        P_COD_CLIENTE IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_SUPER_CLIENTE_TB WHERE COD_CLIENTE = P_COD_CLIENTE;
END;

--#  
-- PROCEDIMIENTOS FIDE_SUPER_MONEDA_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_MONEDA_TB_SP(
    P_COD_MONEDA IN NUMBER,
    P_NOMBRE_MONEDA IN VARCHAR2,
    P_VALOR_MONEDA IN NUMBER
    ) IS
    BEGIN
        INSERT INTO FIDE_SUPER_MONEDA_TB(COD_MONEDA, NOMBRE_MONEDA, VALOR_MONEDA)
        VALUES (P_COD_MONEDA, P_NOMBRE_MONEDA, P_VALOR_MONEDA);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_MONEDA_TB_SP(
        P_COD_MONEDA IN NUMBER,
        P_NOMBRE_MONEDA IN VARCHAR2,
        P_VALOR_MONEDA IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_SUPER_MONEDA_TB
        SET NOMBRE_MONEDA = P_NOMBRE_MONEDA,
            VALOR_MONEDA = P_VALOR_MONEDA
        WHERE COD_MONEDA = P_COD_MONEDA;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_MONEDA_TB_SP(
        P_COD_MONEDA IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_SUPER_MONEDA_TB WHERE COD_MONEDA = P_COD_MONEDA;
END;

--#  
 
-- PROCEDIMIENTOS FIDE_SUPER_TELEFONOS_CLIENTES_TB------------------------
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_TELEFONOS_CLIENTES_TB_SP(
        P_TELEFONO_CLIENTE IN NUMBER
    ) IS
    BEGIN
        INSERT INTO FIDE_SUPER_TELEFONOS_CLIENTES_TB(TELEFONO_CLIENTE)
        VALUES (P_TELEFONO_CLIENTE);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_TELEFONOS_CLIENTES_TB_SP(
        p_COD_TELEFONO IN NUMBER,
        p_TELEFONO_CLIENTE IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_SUPER_TELEFONOS_CLIENTES_TB
        SET TELEFONO_CLIENTE = P_TELEFONO_CLIENTE
        WHERE COD_TELEFONO = P_COD_TELEFONO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_TELEFONOS_CLIENTES_TB_SP(
        P_COD_TELEFONO IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_SUPER_TELEFONOS_CLIENTES_TB 
        WHERE COD_TELEFONO = P_COD_TELEFONO;
END;
--#
-- Procedimientos para la tabla FIDE_SUPER_HISTORIAL_PROVEEDORES_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_HISTORIAL_PROVEEDORES_TB_SP(
    P_COD_PROVEEDOR IN NUMBER,
    P_COD_PRODUCTO IN NUMBER,
    P_FECHA IN DATE,
    P_DESCRIPCION IN VARCHAR2,
    P_CANTIDAD IN NUMBER,
    P_PAGO IN NUMBER
    )IS
    BEGIN
        INSERT INTO FIDE_SUPER_HISTORIAL_PROVEEDORES_TB(COD_PROVEEDOR, COD_PRODUCTO, FECHA, DESCRIPCION, CANTIDAD, PAGO)
        VALUES (P_COD_PROVEEDOR, P_COD_PRODUCTO, P_FECHA, P_DESCRIPCION, P_CANTIDAD, P_PAGO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_HISTORIAL_PROVEEDORES_TB_SP(
    P_COD_HISTORIAL IN NUMBER,
    P_COD_PROVEEDOR IN NUMBER,
    P_COD_PRODUCTO IN NUMBER,
    P_FECHA IN DATE,
    P_DESCRIPCION IN VARCHAR2,
    P_CANTIDAD IN NUMBER,
    P_PAGO IN NUMBER
    )IS
    BEGIN
        UPDATE FIDE_SUPER_HISTORIAL_PROVEEDORES_TB
        SET COD_PROVEEDOR = P_COD_PROVEEDOR,
            COD_PRODUCTO = P_COD_PRODUCTO,
            FECHA = P_FECHA,
            DESCRIPCION = P_DESCRIPCION,
            CANTIDAD = P_CANTIDAD,
            PAGO = P_PAGO
        WHERE COD_HISTORIAL = P_COD_HISTORIAL;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_HISTORIAL_PROVEEDORES_TB_SP(
        P_COD_HISTORIAL IN NUMBER
    ) 
IS
    BEGIN
        DELETE FROM FIDE_SUPER_HISTORIAL_PROVEEDORES_TB
        WHERE COD_HISTORIAL = P_COD_HISTORIAL;
END;
--#
-- PROCEDIMIENTOS FIDE_SUPER_PRODUCTOS_TB
CREATE OR REPLACE PROCEDURE CREATE_FIDE_SUPER_PRODUCTOS_TB_SP(
    P_COD_PRODUCTO IN NUMBER,
    P_NOMBRE_PRODUCTO IN VARCHAR2,
    P_TIPO_PRODUCTO IN VARCHAR2,
    P_CANTIDAD IN NUMBER,
    P_PRECIO IN NUMBER
    )IS
    BEGIN
        INSERT INTO FIDE_SUPER_PRODUCTOS_TB(COD_PRODUCTO, NOMBRE_PRODUCTO, TIPO_PRODUCTO, CANTIDAD, PRECIO)
        VALUES (P_COD_PRODUCTO, P_NOMBRE_PRODUCTO, P_TIPO_PRODUCTO, P_CANTIDAD, P_PRECIO);
END;

CREATE OR REPLACE PROCEDURE UPDATE_FIDE_SUPER_PRODUCTOS_TB_SP(
    P_COD_PRODUCTO IN NUMBER,
    P_NOMBRE_PRODUCTO IN VARCHAR2,
    P_TIPO_PRODUCTO IN VARCHAR2,
    P_CANTIDAD IN NUMBER,
    P_PRECIO IN NUMBER
    ) IS
    BEGIN
        UPDATE FIDE_SUPER_PRODUCTOS_TB
        SET NOMBRE_PRODUCTO = P_NOMBRE_PRODUCTO,
            TIPO_PRODUCTO = P_TIPO_PRODUCTO,
            CANTIDAD = P_CANTIDAD,
            PRECIO = P_PRECIO
        WHERE COD_PRODUCTO = P_COD_PRODUCTO;
END;

CREATE OR REPLACE PROCEDURE DELETE_FIDE_SUPER_PRODUCTOS_TB_SP(
        P_COD_PRODUCTO IN NUMBER
    ) IS
    BEGIN
        DELETE FROM FIDE_SUPER_PRODUCTOS_TB 
        WHERE COD_PRODUCTO = P_COD_PRODUCTO;
END;


-----------------------------FIN PROCEDIMIENTOS ALMACENADOS--------------------------------------------------



---------------------------TRIGERS 4/5 HACE FALTA REV Y NOMNECLATURA-----
-- Este trigger Registra la fecha y hora actual cuando se inserta un nuevo pedido.

CREATE OR REPLACE TRIGGER TRG_REGISTRO_PEDIDO
BEFORE INSERT ON SUPER_PEDIDO
FOR EACH ROW
BEGIN
   
    :NEW.FECHA_PEDIDO := SYSDATE;
END;
/

-- Este trigger Si la fecha de apertura es mayor a 10 años desde la fecha actual, cambia el estado a "Cerrada".

CREATE OR REPLACE TRIGGER TRG_ACTUALIZAR_ESTADO_SUCURSAL
AFTER INSERT OR UPDATE ON SUPER_SUCURSAL
FOR EACH ROW
BEGIN
    
    IF ADD_MONTHS(:NEW.FECHA_APERTURA, 50) < SYSDATE THEN
        UPDATE SUPER_SUCURSAL
        SET ESTADO = 'Cerrada'
        WHERE COD_SUCURSAL = :NEW.COD_SUCURSAL;
    END IF;
END;
/

-- Este trigger Valida que el monto de la última compra no sea negativo.
CREATE OR REPLACE TRIGGER TRG_VALIDAR_MONTO_COMPRA
BEFORE INSERT OR UPDATE ON SUPER_CLIENTE
FOR EACH ROW
BEGIN
   
    IF :NEW.MONTO_ULTIMA_COMPRA < 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'El monto de la última compra no puede ser negativo.');
    END IF;
END;
/
-- Este trigger Incrementa la cantidad del producto en 1.

CREATE OR REPLACE TRIGGER TRG_INCREMENTAR_CANTIDAD_PRODUCTO
AFTER UPDATE OF PRECIO ON SUPER_PRODUCTOS
FOR EACH ROW
BEGIN
    UPDATE SUPER_PRODUCTOS
    SET CANTIDAD = CANTIDAD + 1
    WHERE COD_PRODUCTO = :NEW.COD_PRODUCTO;
END;
------------------------------------FIN TRIGGERS--------------------------

--CURSORES 8/15




-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 1: obtiene detalles de empleados por departamento

DECLARE
    CURSOR CURSOR_EMPLEADOS_POR_DEPARTAMENTO IS
    SELECT E.COD_EMPLEADO, E.APELLIDO_1, E.APELLIDO_2, E.CORREO, E.TELEFONO, E.SALARIO, D.NOMBRE_DEPARTAMENTO
    FROM SUPER_EMPLEADO E
    JOIN SUPER_PUESTOS P ON E.COD_PUESTO = P.COD_PUESTO
    JOIN SUPER_DEPARTAMENTO D ON P.COD_DEPARTAMENTO = D.COD_DEPARTAMENTO;
    
    empleado_record CURSOR_EMPLEADOS_POR_DEPARTAMENTO%ROWTYPE;
BEGIN
    OPEN CURSOR_EMPLEADOS_POR_DEPARTAMENTO;
    LOOP
        FETCH CURSOR_EMPLEADOS_POR_DEPARTAMENTO INTO empleado_record;
        EXIT WHEN CURSOR_EMPLEADOS_POR_DEPARTAMENTO%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Empleado: ' || empleado_record.COD_EMPLEADO || ', Nombre: ' || empleado_record.APELLIDO_1 || ' ' || empleado_record.APELLIDO_2 || ', Correo: ' || empleado_record.CORREO || ', Telefono: ' || empleado_record.TELEFONO || ', Salario: ' || empleado_record.SALARIO || ', Departamento: ' || empleado_record.NOMBRE_DEPARTAMENTO);
    END LOOP;
    CLOSE CURSOR_EMPLEADOS_POR_DEPARTAMENTO;
END;
/

-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 2: Obtiene el historial de pedidos de productos por proveedor

DECLARE
    CURSOR CURSOR_HISTORIAL_PROVEEDORES IS
    SELECT HP.COD_HISTORIAL, P.NOMBRE_PROVEDOR, PR.NOMBRE_PRODCTO, HP.FECHA, HP.DESCRIPCION, HP.CANTIDAD, HP.PAGO
    FROM SUPER_HISTORIAL_PROVEDORES HP
    JOIN SUPER_PROVEDORES P ON HP.COD_PROVEDOR = P.COD_PROVEDOR
    JOIN SUPER_PRODUCTOS PR ON HP.COD_PRODUCTO = PR.COD_PRODUCTO;
    
    historial_record CURSOR_HISTORIAL_PROVEEDORES%ROWTYPE;
BEGIN
    OPEN CURSOR_HISTORIAL_PROVEEDORES;
    LOOP
        FETCH CURSOR_HISTORIAL_PROVEEDORES INTO historial_record;
        EXIT WHEN CURSOR_HISTORIAL_PROVEEDORES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Historial: ' || historial_record.COD_HISTORIAL || ', Proveedor: ' || historial_record.NOMBRE_PROVEDOR || ', Producto: ' || historial_record.NOMBRE_PRODCTO || ', Fecha: ' || historial_record.FECHA || ', Descripción: ' || historial_record.DESCRIPCION || ', Cantidad: ' || historial_record.CANTIDAD || ', Pago: ' || historial_record.PAGO);
    END LOOP;
    CLOSE CURSOR_HISTORIAL_PROVEEDORES;
END;
/

-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 3: Obtiene detalles de sucursales y sus gerentes

DECLARE
    CURSOR CURSOR_SUCURSALES_GERENTES IS
    SELECT S.COD_SUCURSAL, S.NOMBRE_SUCURSAL, S.DIRECCION_SUCURSAL, S.TELEFONO, E.APELLIDO_1, E.APELLIDO_2, E.CORREO
    FROM SUPER_SUCURSAL S
    JOIN SUPER_EMPLEADO E ON S.COD_GERENTE = E.COD_EMPLEADO;
    
    sucursal_record CURSOR_SUCURSALES_GERENTES%ROWTYPE;
BEGIN
    OPEN CURSOR_SUCURSALES_GERENTES;
    LOOP
        FETCH CURSOR_SUCURSALES_GERENTES INTO sucursal_record;
        EXIT WHEN CURSOR_SUCURSALES_GERENTES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Sucursal: ' || sucursal_record.COD_SUCURSAL || ', Nombre: ' || sucursal_record.NOMBRE_SUCURSAL || ', Dirección: ' || sucursal_record.DIRECCION_SUCURSAL || ', Teléfono: ' || sucursal_record.TELEFONO || ', Gerente: ' || sucursal_record.APELLIDO_1 || ' ' || sucursal_record.APELLIDO_2 || ', Correo: ' || sucursal_record.CORREO);
    END LOOP;
    CLOSE CURSOR_SUCURSALES_GERENTES;
END;
/


-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 4: Obtiene productos de proveedores

DECLARE
    CURSOR CURSOR_PRODUCTOS_PROVEEDORES IS
    SELECT PR.COD_PRODUCTO, PR.NOMBRE_PRODCTO, P.NOMBRE_PROVEDOR, HP.FECHA, HP.DESCRIPCION, HP.CANTIDAD, HP.PAGO
    FROM SUPER_PRODUCTOS PR
    JOIN SUPER_HISTORIAL_PROVEDORES HP ON PR.COD_PRODUCTO = HP.COD_PRODUCTO
    JOIN SUPER_PROVEDORES P ON HP.COD_PROVEDOR = P.COD_PROVEDOR;
    
    producto_record CURSOR_PRODUCTOS_PROVEEDORES%ROWTYPE;
BEGIN
    OPEN CURSOR_PRODUCTOS_PROVEEDORES;
    LOOP
        FETCH CURSOR_PRODUCTOS_PROVEEDORES INTO producto_record;
        EXIT WHEN CURSOR_PRODUCTOS_PROVEEDORES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Producto: ' || producto_record.COD_PRODUCTO || ', Nombre: ' || producto_record.NOMBRE_PRODCTO || ', Proveedor: ' || producto_record.NOMBRE_PROVEDOR || ', Fecha: ' || producto_record.FECHA || ', Descripción: ' || producto_record.DESCRIPCION || ', Cantidad: ' || producto_record.CANTIDAD || ', Pago: ' || producto_record.PAGO);
    END LOOP;
    CLOSE CURSOR_PRODUCTOS_PROVEEDORES;
END;
/

-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 5: Obtiene el historial de pedidos de productos por proveedor

DECLARE
    CURSOR CURSOR_HISTORIAL_PROVEEDORES IS
    SELECT HP.COD_HISTORIAL, P.NOMBRE_PROVEDOR, PR.NOMBRE_PRODCTO, HP.FECHA, HP.DESCRIPCION, HP.CANTIDAD, HP.PAGO
    FROM SUPER_HISTORIAL_PROVEDORES HP
    JOIN SUPER_PROVEDORES P ON HP.COD_PROVEDOR = P.COD_PROVEDOR
    JOIN SUPER_PRODUCTOS PR ON HP.COD_PRODUCTO = PR.COD_PRODUCTO;
    
    historial_record CURSOR_HISTORIAL_PROVEEDORES%ROWTYPE;
BEGIN
    OPEN CURSOR_HISTORIAL_PROVEEDORES;
    LOOP
        FETCH CURSOR_HISTORIAL_PROVEEDORES INTO historial_record;
        EXIT WHEN CURSOR_HISTORIAL_PROVEEDORES%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Historial ID: ' || historial_record.COD_HISTORIAL || ', Proveedor: ' || historial_record.NOMBRE_PROVEDOR || ', Producto: ' || historial_record.NOMBRE_PRODCTO || ', Fecha: ' || historial_record.FECHA || ', Descripción: ' || historial_record.DESCRIPCION || ', Cantidad: ' || historial_record.CANTIDAD || ', Pago: ' || historial_record.PAGO);
    END LOOP;
    CLOSE CURSOR_HISTORIAL_PROVEEDORES;
END;
/


-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 6: Obtiene los proveedores con más de 5 productos

DECLARE
    CURSOR CURSOR_PROVEEDORES_MAS_DE_5_PRODUCTOS IS
    SELECT P.COD_PROVEDOR, P.NOMBRE_PROVEDOR, COUNT(PR.COD_PRODUCTO) AS NUM_PRODUCTOS
    FROM SUPER_PROVEDORES P
    JOIN SUPER_HISTORIAL_PROVEDORES HP ON P.COD_PROVEDOR = HP.COD_PROVEDOR
    JOIN SUPER_PRODUCTOS PR ON HP.COD_PRODUCTO = PR.COD_PRODUCTO
    GROUP BY P.COD_PROVEDOR, P.NOMBRE_PROVEDOR
    HAVING COUNT(PR.COD_PRODUCTO) > 5;
    
    proveedor_record CURSOR_PROVEEDORES_MAS_DE_5_PRODUCTOS%ROWTYPE;
BEGIN
    OPEN CURSOR_PROVEEDORES_MAS_DE_5_PRODUCTOS;
    LOOP
        FETCH CURSOR_PROVEEDORES_MAS_DE_5_PRODUCTOS INTO proveedor_record;
        EXIT WHEN CURSOR_PROVEEDORES_MAS_DE_5_PRODUCTOS%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Proveedor ID: ' || proveedor_record.COD_PROVEDOR || ', Nombre: ' || proveedor_record.NOMBRE_PROVEDOR || ', Número de Productos: ' || proveedor_record.NUM_PRODUCTOS);
    END LOOP;
    CLOSE CURSOR_PROVEEDORES_MAS_DE_5_PRODUCTOS;
END;
/


-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 7: Obtiene el promedio de salario de empleados por departamento

DECLARE
    CURSOR CURSOR_PROMEDIO_SALARIO_DEPARTAMENTO IS
    SELECT D.NOMBRE_DEPARTAMENTO, AVG(E.SALARIO) AS PROMEDIO_SALARIO
    FROM SUPER_DEPARTAMENTO D
    JOIN SUPER_PUESTOS P ON D.COD_DEPARTAMENTO = P.COD_DEPARTAMENTO
    JOIN SUPER_EMPLEADO E ON P.COD_PUESTO = E.COD_PUESTO
    GROUP BY D.NOMBRE_DEPARTAMENTO;
    
    departamento_record CURSOR_PROMEDIO_SALARIO_DEPARTAMENTO%ROWTYPE;
BEGIN
    OPEN CURSOR_PROMEDIO_SALARIO_DEPARTAMENTO;
    LOOP
        FETCH CURSOR_PROMEDIO_SALARIO_DEPARTAMENTO INTO departamento_record;
        EXIT WHEN CURSOR_PROMEDIO_SALARIO_DEPARTAMENTO%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Departamento: ' || departamento_record.NOMBRE_DEPARTAMENTO || ', Salario Promedio: ' || departamento_record.PROMEDIO_SALARIO);
    END LOOP;
    CLOSE CURSOR_PROMEDIO_SALARIO_DEPARTAMENTO;
END;
/


-- Creado por Jose Daniel Solano el 10/8/2024
-- Enunciado 13: Cursor para obtener empleados que trabajan en una sucursal específica

DECLARE
    CURSOR CURSOR_EMPLEADOS_SUCURSAL IS
    SELECT E.APELLIDO_1, E.APELLIDO_2, P.DESCRIPCION AS NOMBRE_PUESTO, E.SALARIO
    FROM SUPER_EMPLEADO E
    JOIN SUPER_PUESTOS P ON E.COD_PUESTO = P.COD_PUESTO
    WHERE E.COD_PUESTO IN (
        SELECT COD_PUESTO
        FROM SUPER_SUCURSAL
        WHERE COD_SUCURSAL = v_cod_sucursal
    );
    
    empleado_record CURSOR_EMPLEADOS_SUCURSAL%ROWTYPE;
    v_cod_sucursal NUMBER := 1; -- Cambia este valor por el ID de la sucursal que deseas consultar
BEGIN
    -- Abrir el cursor
    OPEN CURSOR_EMPLEADOS_SUCURSAL;
    LOOP
        FETCH CURSOR_EMPLEADOS_SUCURSAL INTO empleado_record;
        EXIT WHEN CURSOR_EMPLEADOS_SUCURSAL%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Apellido 1: ' || empleado_record.APELLIDO_1 || ', Apellido 2: ' || empleado_record.APELLIDO_2 || ', Puesto: ' || empleado_record.NOMBRE_PUESTO || ', Salario: ' || empleado_record.SALARIO);
    END LOOP;
    CLOSE CURSOR_EMPLEADOS_SUCURSAL;
END;
/

-- Creado por Jose Daniel Solano el 10/8/2024
-- Cursor 8: Obtiene empleados con salario superior a un monto específico

DECLARE
    v_monto_minimo NUMBER := 1000; -- Cambiar este valor según sea necesario
    
    CURSOR CURSOR_EMPLEADOS_ALTO_SALARIO IS
    SELECT E.APELLIDO_1, E.APELLIDO_2, E.SALARIO
    FROM SUPER_EMPLEADO E
    WHERE E.SALARIO > v_monto_minimo;
    
    empleado_record CURSOR_EMPLEADOS_ALTO_SALARIO%ROWTYPE;
BEGIN

    OPEN CURSOR_EMPLEADOS_ALTO_SALARIO;
    LOOP
        FETCH CURSOR_EMPLEADOS_ALTO_SALARIO INTO empleado_record;
        EXIT WHEN CURSOR_EMPLEADOS_ALTO_SALARIO%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Empleado: ' || empleado_record.APELLIDO_1 || ' ' || empleado_record.APELLIDO_2 || ', Salario: ' || empleado_record.SALARIO);
    END LOOP;
    CLOSE CURSOR_EMPLEADOS_ALTO_SALARIO;
END;
/










